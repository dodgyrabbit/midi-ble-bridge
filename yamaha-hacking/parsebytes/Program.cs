using System;
using System.Collections.Generic;

namespace parsebytes
{
    class Program
    {
        static void Main(string[] args)
        {
            List<byte[]> data = new List<byte[]>();
            data.Add(new byte[] {0xB1,0xDD,0xFE});
            data.Add(new byte[] {0xB3,0xA5,0xFE});
            data.Add(new byte[] {0xB4,0xED,0xFE});
            data.Add(new byte[] {0xB6,0xB5,0xFE,0xFD,0xFE,0xC5,0xFE,0x8D,0xFE,0xD5,0xFE,0x9D,0xFE,0xE5,0xFE,0xAD,0xFE,0xF5,0xFE});
            data.Add(new byte[] {0x84,0xBD,0xFE,0x85,0xFE,0xCD,0xFE,0x95,0xFE,0xDC,0xFE,0xA5,0xFE,0xED,0xFE,0xB5,0xFE,0xFC,0xFE}); 
            data.Add(new byte[] {0x92,0xC5,0xFE,0x8D,0xFE,0xD4,0xFE,0x9D,0xFE,0xE4,0xFE,0xD3,0x90,0x22,0x1B,0x9A,0x80,0x22,0x40});
            data.Add(new byte[] {0x9A,0xAC,0xFE,0xF5,0xFE,0xBC,0xFE,0x84,0xFE,0xCC,0xFE,0x94,0xFE,0xDC,0xFE,0xA4,0xFE,0xEC,0xFE}); 
            data.Add(new byte[] {0xA8,0xB4,0xFE,0xFC,0xFE,0xC4,0xFE,0x8C,0xFE,0xD4,0xFE,0x9C,0xFE,0xE4,0xFE,0xAC,0xFE,0xF4,0xFE}); 
            data.Add(new byte[] {0xB6,0xBC,0xFE,0x84,0xFE,0xCC,0xFE,0x94,0xFE,0xDC,0xFE,0xA4,0xFE,0xEC,0xFE,0xB4,0xFE,0xFC,0xFE}); 
            data.Add(new byte[] {0x84,0xC4,0xFE,0x8C,0xFE,0xD4,0xFE,0x9C,0xFE,0xE4,0xFE,0xAC,0xFE,0xF4,0xFE,0xBC,0xFE,0x84,0xFE}); 
            data.Add(new byte[] {0x92,0xCC,0xFE,0x94,0xFE,0xDC,0xFE,0xA4,0xFE,0xEC,0xFE,0xB4,0xFE,0xFC,0xFE,0xC4,0xFE,0x8C,0xFE}); 
            data.Add(new byte[] {0xA0,0xD4,0xFE,0x9C,0xFE,0xE4,0xFE,0xAC,0xFE,0xF4,0xFE}); 
            data.Add(new byte[] {0xA8,0xBC,0xFE}); 
            data.Add(new byte[] {0xAA,0x84,0xFE}); 
            data.Add(new byte[] {0xAB,0xCC,0xFE}); 
            data.Add(new byte[] {0xAD,0x94,0xFE}); 
            data.Add(new byte[] {0xAE,0xDC,0xFE}); 
            data.Add(new byte[] {0xB0,0xA4,0xFE}); 
            data.Add(new byte[] {0xB0,0xD3,0x90,0x15,0x4A});
            data.Add(new byte[] {0xB1,0xEC,0xFE}); 
            data.Add(new byte[] {0xB3,0xB4,0xFE}); 
            data.Add(new byte[] {0xB4,0xFC,0xFE}); 
            data.Add(new byte[] {0xB5,0x8D,0x80,0x15,0x40});
            data.Add(new byte[] {0xB6,0xC4,0xFE}); 
            data.Add(new byte[] {0xB8,0x8C,0xFE}); 
            data.Add(new byte[] {0xB9,0xD4,0xFE}); 
            data.Add(new byte[] {0xBB,0x9C,0xFE}); 
            data.Add(new byte[] {0xBC,0xE4,0xFE}); 
            data.Add(new byte[] {0xBE,0xAC,0xFE}); 
            data.Add(new byte[] {0xBF,0xF4,0xFE}); 
            data.Add(new byte[] {0x81,0xAD,0x90,0x6C,0x50});
            data.Add(new byte[] {0x81,0xBC,0xFE}); 
            data.Add(new byte[] {0x83,0x84,0xFE}); 
            data.Add(new byte[] {0x84,0xCC,0xFE}); 
            data.Add(new byte[] {0x86,0x94,0xFE}); 
            data.Add(new byte[] {0x86,0x9D,0x80,0x6C,0x40});
            data.Add(new byte[] {0x87,0xDC,0xFE}); 
            data.Add(new byte[] {0x89,0xA3,0xFE}); 
            data.Add(new byte[] {0x8A,0xEC,0xFE}); 
            data.Add(new byte[] {0x8C,0xB4,0xFE}); 
            data.Add(new byte[] {0x8D,0xFB,0xFE}); 
            data.Add(new byte[] {0x8F,0xC3,0xFE}); 
            data.Add(new byte[] {0x90,0xF8,0x90,0x3C,0x47});
            data.Add(new byte[] {0x91,0x8C,0xFE}); 
            data.Add(new byte[] {0x92,0xD3,0xFE}); 
            data.Add(new byte[] {0x94,0x9B,0xFE}); 
            data.Add(new byte[] {0x95,0xE3,0xFE}); 
            data.Add(new byte[] {0x96,0xFE,0x80,0x3C,0x40});
            data.Add(new byte[] {0x97,0xAB,0xFE}); 
            data.Add(new byte[] {0x98,0xF3,0xFE}); 
            data.Add(new byte[] {0x9A,0xBB,0xFE}); 
            data.Add(new byte[] {0x9C,0x83,0xFE}); 
            data.Add(new byte[] {0x9D,0xCB,0xFE}); 
            data.Add(new byte[] {0x9F,0x93,0xFE}); 
            data.Add(new byte[] {0xA0,0xDB,0xFE}); 
            data.Add(new byte[] {0xA2,0xA3,0xFE}); 
            data.Add(new byte[] {0xA3,0xEB,0xFE}); 
            data.Add(new byte[] {0xA5,0xB3,0xFE}); 
            data.Add(new byte[] {0xA6,0xFB,0xFE}); 
            data.Add(new byte[] {0xA8,0xC3,0xFE}); 
            data.Add(new byte[] {0xAA,0x8B,0xFE}); 
            data.Add(new byte[] {0xAB,0xD3,0xFE}); 
            data.Add(new byte[] {0xAD,0x9B,0xFE}); 

            foreach (byte[] message in data)
            {
                int index=0;
                while (index < 3)
                {
                    // Mask out the first two bits
                    int timestampHigh = message[index] & 0b00111111;

                    // Shift left by 7, so we can later combine with bottom 7 bits
                    timestampHigh = timestampHigh << 7;
                    index++;

                    // Mask out first bit
                    int timeStampLow = message[index] & 0b01111111;
                    index++;

                    int timestamp = timestampHigh | timeStampLow;

                    byte midiByte = message[index];
                    index++;

                    Console.WriteLine($"{midiByte:X} at {timestamp}ms");
                }
            }
        }
    }
}
